from reportlab.lib import colors
from reportlab.lib.pagesizes import A4
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.lib.units import mm
from reportlab.pdfgen import canvas
from reportlab.lib import colors
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont

import sqlite3
import re







class FontQuery:
    def __init__(self, db_path, font_size):
        # ËøûÊé•Êï∞ÊçÆÂ∫ì
        print(db_path)
        self.conn = sqlite3.connect(db_path)
        self.font_size = font_size

    def queryCharWidth(self, char):
        # Êü•ËØ¢ÂÆΩÈ´òÊØî
        c = self.conn.cursor()
        c.execute(f"SELECT aspect_ratio FROM font_metrics WHERE unicode={ord(char)}")
        result = c.fetchone()

        if result:
            aspect_ratio = result[0]
            # ËÆ°ÁÆóÂÆΩÂ∫¶Âπ∂ËøîÂõûÁªìÊûú
            width = round(aspect_ratio * self.font_size)
            return width

        return None

    def isEmoji(self, s):
        """
        Âà§Êñ≠Â≠óÁ¨¶‰∏≤ÊòØÂê¶‰∏∫EmojiË°®ÊÉÖ
        """
        emoji_pattern = re.compile("["
                                   u"\U0001F600-\U0001F64F"  # emoticons
                                   u"\U0001F300-\U0001F5FF"  # symbols & pictographs
                                   u"\U0001F680-\U0001F6FF"  # transport & map symbols
                                   u"\U0001F1E0-\U0001F1FF"  # flags (iOS)
                                   "]+", flags=re.UNICODE)
        return emoji_pattern.search(s) is not None


class DataProcessor:
    def __init__(self, textHeight, lineSpacing, Width, Height, boxPadding, emojiWidth, qqemojiWidth):
        self.textHeight = textHeight
        self.lineSpacing = lineSpacing
        self.Width = Width
        self.Height = Height
        self.boxPadding = boxPadding
        self.emojiWidth = emojiWidth
        self.qqemojiWidth = qqemojiWidth

    def procChatBoxMessage(self, dataList, startX, startY):
        isFinish = False
        while(isFinish):
            isFinish, chatBoxHeight, drawData, remaindData = self.processMessageList(dataList, startX, startY)


    def processMessageList(self, dataList, startX, startY):
        drawData = []
        # ÂàùÂßãÂåñÁªòÂà∂Âå∫Âüü
        curX = self.boxPadding + startX
        bufStartX = curX
        curY = self.boxPadding + startY

        maxY = self.Height - startY

        # ÈÅçÂéÜÂàóË°®‰∏≠ÁöÑÊØè‰∏Ä‰∏™ÂÖÉÁ¥†
        for item in dataList:
            # Â§ÑÁêÜ "m" Á±ªÂûãÁöÑÂÖÉÁ¥†
            if item[0] == "m":
                # ÊöÇÂ≠ò‰∏ÄË°å‰∏≠ÁöÑÊñáÊú¨
                buffer = ""
                # ÈÅçÂéÜÂ≠óÁ¨¶‰∏≤‰∏≠ÁöÑÊØè‰∏Ä‰∏™Â≠óÁ¨¶
                for character in item[1]:
                    # Âà§Êñ≠Â≠óÁ¨¶ÊòØÂê¶‰∏∫Ë°®ÊÉÖÁ¨¶Âè∑
                    if fontQuery.isEmoji(character):
                        # Â¶ÇÊûúÊòØË°®ÊÉÖÁ¨¶Âè∑ÔºåÂàôÁªòÂà∂Á¨¶Âè∑ÔºåÂπ∂Êõ¥Êñ∞ÂΩìÂâçÂùêÊ†á

                        if buffer != "":
                            pdfDraw.drawText(buffer, bufStartX, curY)
                            buffer = ""

                        drawData.append([pdfDraw.drawEmoji, [character, curX, curY]])
                        curX += self.emojiWidth
                        bufStartX = curX + self.emojiWidth
                    else:
                        # Â¶ÇÊûú‰∏çÊòØË°®ÊÉÖÁ¨¶Âè∑ÔºåÂÖàÊü•ËØ¢ÂÖ∂ÂÆΩÂ∫¶
                        charWidth = fontQuery.queryCharWidth(character)
                        # Âà§Êñ≠ÊòØÂê¶ÈúÄË¶ÅÊç¢Ë°å
                        if curX + charWidth > startX + self.Width:
                            # Â¶ÇÊûúËØ•Â≠óÁ¨¶Âä†‰∏äÂâçÈù¢Â∑≤ÊöÇÂ≠òÂ≠óÁ¨¶‰∏≤ÁöÑÂÆΩÂ∫¶‰ºöË∂ÖÂá∫ÂàóÂÆΩÔºåÂàôÂÖàÂ∞ÜÊöÇÂ≠òÂ≠óÁ¨¶‰∏≤ÁªòÂà∂Âá∫Êù•
                            drawData.append([pdfDraw.drawText, [buffer, bufStartX, curY]])
                            # Êõ¥Êñ∞ÂΩìÂâçÂùêÊ†áÂà∞‰∏ã‰∏ÄË°åÂºÄÂ§¥ÔºåÂπ∂Ê∏ÖÁ©∫ÊöÇÂ≠òÂ≠óÁ¨¶‰∏≤
                            curX = startX + self.boxPadding
                            bufStartX = curX
                            curY += self.textHeight + self.lineSpacing
                            buffer = ""
                        # Â∞ÜÂΩìÂâçÂ≠óÁ¨¶Âä†ÂÖ•ÁºìÂÜ≤Âå∫‰∏≠
                        buffer += character
                # Â§ÑÁêÜÂâ©‰ΩôÁöÑÊöÇÂ≠òÂ≠óÁ¨¶‰∏≤
                if buffer:
                    drawData.append([pdfDraw.drawText, [buffer, bufStartX, curY]])
                    # Êõ¥Êñ∞ÂΩìÂâçÂùêÊ†áÂà∞‰∏ã‰∏ÄË°åÂºÄÂ§¥Ôºå‰∏çÂä†Ë°åÈó¥Ë∑ù
                    curX = startX + self.boxPadding
                    bufStartX = curX
                    curY += self.textHeight

            # Â§ÑÁêÜ "qqemoji" Á±ªÂûãÁöÑÂÖÉÁ¥†
            elif item[0] == "qqemoji":
                # ÁªòÂà∂qqË°®ÊÉÖÁ¨¶Âè∑Âπ∂Êõ¥Êñ∞ÂùêÊ†á
                drawData.append([pdfDraw.DrawQQEmoji([item[2], self.qqemojiWidth, curX, curY)]])
                curX += self.qqemojiWidth

            # # Â§ÑÁêÜ "img" Á±ªÂûãÁöÑÂÖÉÁ¥†
            # elif item[0] == "img":
            #     # ÁªòÂà∂ÂõæÁâáÂπ∂Êõ¥Êñ∞ÂùêÊ†á
            #     pdfDraw.DrawQQimg(item[2])
            #     # ÂõæÁâáÂêéË¶ÅÂä†‰∏§‰∏™Êç¢Ë°å
            #     curX = startX + self.boxPadding
            #     curY += self.textHeight + self.lineSpacing
            #     curY += self.textHeight + self.lineSpacing

            # ÂÖ∂‰ªñÁ±ªÂûãÁöÑÂÖÉÁ¥†ÂøΩÁï•

            # Ê£ÄÊü•ÊòØÂê¶Ë∂ÖÂá∫ÁªòÂà∂Âå∫ÂüüÔºåÂ¶ÇÊûúÊòØÔºåÂàôËøîÂõûÂâ©‰ΩôÁöÑÂÖÉÁ¥†
            if curY >= maxY:
                return False, curY, drawData, dataList[dataList.index(item):]

        # Â§ÑÁêÜÂÆåÊâÄÊúâÂÖÉÁ¥†ÔºåËøîÂõûÁ©∫ÂàóË°®
        return True curY, drawData, []

class PdfDraw():
    def __init__(self, fontPath, chatBoxradius, pageSize):
        self.chatBoxradius = chatBoxradius

        pdfmetrics.registerFont(TTFont('simhei', fontPath))
        #pdfmetrics.registerFont(TTFont('ColorEmoji', 'fonts/ColorEmoji.ttf'))
        self.pdf_canvas = canvas.Canvas("example.pdf", pagesize=pageSize, bottomup=0)
        self.PAGE_HEIGHT = A4[1]
        self.PAGE_WIDTH = A4[0]
        print(self.PAGE_WIDTH / mm)

    def save(self):
        self.pdf_canvas.save()

    def showPage(self):
        self.pdf_canvas.showPage()

    def drawText(self,text, x, y):
        self.pdf_canvas.setFont('simhei', 3 * mm)
        self.pdf_canvas.drawString(x * mm, y * mm, text)
        
    def drawQQEmoji(self, x, y):
        1
    def drawEmoji(self, x, y):
        1
        # pdf_canvas.setFont('Noto-COLRv1', 12 * mm)
        # pdf_canvas.drawString(7.25 * mm, 10 * mm, "ü•∫")
    def drawChatBox(self, x, y, width, Hight):
        self.pdf_canvas.roundRect(x, y, width, Hight, chatBoxradius)


textHeight = 100 * mm
lineSpacing = 1 * mm
Width = 40 * mm
Height = 40 * mm
boxPadding = 1 * mm
emojiWidth = 1 * mm
qqemojiWidth = 1 * mm
chatBoxradius = 1 * mm

topMargin = 3 * mm
leftMargin = 3 * mm
rightMargin = 3 * mm
bottomMargin = 3 * mm

pageSize = A4
pageHeight = pageSize[1]
pageWidth = pageSize[0]

fontName = "simhei"
fontDirName = "../lib/fonts/"
fontPath = fontDirName + fontName + ".ttf"
fontInfoPath = fontDirName + fontName + "_aspect_ratio.db"

fontQuery = FontQuery(fontInfoPath, textHeight)
pdfDraw = PdfDraw(fontPath, chatBoxradius, pageSize)
dataprocessor = DataProcessor(textHeight, lineSpacing,Width, Height, boxPadding, emojiWidth, qqemojiWidth)
dataprocessor.processMessageList([["m","12121"]],1 * mm, 1 * mm)
pdfDraw.drawChatBox(200*mm,200*mm,200*mm,200*mm)
pdfDraw.save()





